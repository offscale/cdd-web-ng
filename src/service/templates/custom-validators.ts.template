import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';

export class CustomValidators {
  public static exclusiveMinimum(min: number): ValidatorFn {
    return (control: AbstractControl): ValidationErrors | null => {
      if (control.value === null || control.value === undefined || control.value <= min) {
        return { exclusiveMinimum: { min, actual: control.value } };
      }
      return null;
    };
  }

  public static exclusiveMaximum(max: number): ValidatorFn {
    return (control: AbstractControl): ValidationErrors | null => {
      if (control.value === null || control.value === undefined || control.value >= max) {
        return { exclusiveMaximum: { max, actual: control.value } };
      }
      return null;
    };
  }

  public static multipleOf(factor: number): ValidatorFn {
    return (control: AbstractControl): ValidationErrors | null => {
      if (control.value === null || control.value === undefined || control.value % factor !== 0) {
        return { multipleOf: { factor, actual: control.value } };
      }
      return null;
    };
  }

  public static uniqueItems(): ValidatorFn {
    return (control: AbstractControl): ValidationErrors | null => {
      if (!Array.isArray(control.value)) {
        return null;
      }
      const unique = new Set(control.value);
      if (unique.size !== control.value.length) {
        return { uniqueItems: true };
      }
      return null;
    };
  }
}
